{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Claudia/Desktop/MesQueUnGrupDeDones1.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/supabase.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(supabase, router) {\n    this.supabase = supabase;\n    this.router = router;\n  }\n  canActivate() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const user = yield firstValueFrom(_this.supabase.user$);\n        if (user) {\n          return true;\n        }\n        yield _this.router.navigate(['/auth/login']);\n        return false;\n      } catch (error) {\n        console.error('Auth guard error:', error);\n        yield _this.router.navigate(['/auth/login']);\n        return false;\n      }\n    })();\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.SupabaseService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["firstValueFrom","AuthGuard","constructor","supabase","router","canActivate","_this","_asyncToGenerator","user","user$","navigate","error","console","i0","ɵɵinject","i1","SupabaseService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Claudia\\Desktop\\MesQueUnGrupDeDones1.0\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SupabaseService } from '../services/supabase.service';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard {\r\n  constructor(\r\n    private supabase: SupabaseService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  async canActivate(): Promise<boolean> {\r\n    try {\r\n      const user = await firstValueFrom(this.supabase.user$);\r\n      \r\n      if (user) {\r\n        return true;\r\n      }\r\n\r\n      await this.router.navigate(['/auth/login']);\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Auth guard error:', error);\r\n      await this.router.navigate(['/auth/login']);\r\n      return false;\r\n    }\r\n  }\r\n}"],"mappings":";AAGA,SAASA,cAAc,QAAQ,MAAM;;;;AAKrC,OAAM,MAAOC,SAAS;EACpBC,YACUC,QAAyB,EACzBC,MAAc;IADd,KAAAD,QAAQ,GAARA,QAAQ;IACR,KAAAC,MAAM,GAANA,MAAM;EACb;EAEGC,WAAWA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACf,IAAI;QACF,MAAMC,IAAI,SAASR,cAAc,CAACM,KAAI,CAACH,QAAQ,CAACM,KAAK,CAAC;QAEtD,IAAID,IAAI,EAAE;UACR,OAAO,IAAI;QACb;QAEA,MAAMF,KAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;QAC3C,OAAO,KAAK;MACd,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzC,MAAML,KAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;QAC3C,OAAO,KAAK;MACd;IAAC;EACH;;;uBArBWT,SAAS,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,eAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATjB,SAAS;MAAAkB,OAAA,EAATlB,SAAS,CAAAmB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}